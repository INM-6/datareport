from urllib.parse import urlencode, urlunparse
from urllib.request import urlopen
import os.path
import re

configfile: 'config.yaml'
reporter = "../../datareport/reporter.py"   # this should just be "reporter"



def data(name):
    ' returns a full filename to the datafile with given name '
    return os.path.join(config['datadir'], name.lstrip('/'))

def report(name):
    return os.path.join(config['outdir'], name.lstrip('/'))

def report_html(name):
    return os.path.join(config['outdir_html'], name.lstrip('/'))

rule all:
    input:
        report_html('Phonelist.html'),


rule mkhtml:
    '''
    This rule uses Pandoc to convert a Markdown file to HTML. Some extensions
    are enabled to produce nice tables.

    Apart from the actual Markdown formatted report, also the style sheet (CSS)
    is required in the output folder. This is copied in by another rule.
    '''
    input:
        files=[report('{name}.md')],
        css=report_html('document.css'),
    output:
        report_html('{name}.html'),
    params:
        extensions="+simple_tables+multiline_tables",
    shell:
        '''
        pandoc -f markdown{params.extensions} -t html --css "$(basename "{input.css}")" -o {output} {input.files}
        '''

rule copy_css:
    '''
    For nice styling of the output HTML files, we copy the style sheet (CSS)
    into the HTML destination folder.
    '''
    output:
        '{path}/{name}.css',
    input:
        '{name}.css',
    shell:
        '''
        cp -v {input} {output}
        '''

rule make_Phonelist:
    '''
    This is the main rule which compiles the report with the given data.

    The report target format is defined by the format of the used template. In
    this example we want to produce a Markdown document which can later be
    converted to many other formats. The placeholders in the template file are
    filled with the data from the Phonelist YAML file given as data parameter.
    '''
    input:
        'templates/Phonelist.md',
        phonelist = 'data/Phonelist_20170921.yaml',
    output:
        report('Phonelist.md')
    run:
        shell('%(reporter)s -t %(template)s -o %(output)s %(datadef)s' % {
            'reporter': reporter,
            'template': input[0],
            # this makes the snakemake input dictionary available in the reporter template:
            'datadef': " ".join(["%s=%s" % kv for kv in input.items()]),
            'output': output[0],
        })


rule csv2yaml:
    input:
        '{name}.csv'
    output:
        temporary('{name}.yaml'),
    run:
        from ruamel import yaml
        import csv
        with open(input[0], 'r') as infile, open(output[0], 'w') as outfile:
            csvinput = csv.reader(infile)
            head = None
            data = list()
            for row in csvinput:
                if head is None:
                    head = row
                    continue
                data.append(dict(zip(head, row)))
            yaml.dump(data, stream=outfile)

